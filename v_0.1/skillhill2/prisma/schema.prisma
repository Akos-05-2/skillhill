datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Users")
}

model Courses{
    course_id          String           @id @default(cuid())
    course_name        String
    description        String
    created_at         DateTime         @default(now())
    user_id            String
    document_id        String
}

model Assignments{
    assingment_id       String          @id @default(cuid())
    course_id           String
    title               String
    due_date            DateTime
    created_at          DateTime        @default(now())          
}

model Roles{
    role_id             String          @id @default(cuid())
    role_name           String
}

model Course_materials{
    material_id         String          @id @default(cuid())
    course_id           String
    document_id         String
    created_at          DateTime        @default(now())
}

model Submissions{
    submission_id       String          @id @default(cuid())
    assignment_id       String
    user_id             String
    document_id         String
    submission_date     DateTime        @default(now())
}

model Enrollments{
    enrollment_id      String           @id @default(cuid())
    user_id            String
    course_id          String
    enrolmment_date    DateTime         @default(now())
}

model Documents{
    document_id        String          @id @default(cuid())
}

model Document_files{
    file_id            String          @id  @default(cuid())
    document_id        String
    file_path          String
    created_at         DateTime        @default(now())
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])

  @@map("Accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
  @@map("Sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("VerificationTokens")
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
  @@map("Authenticators")
}