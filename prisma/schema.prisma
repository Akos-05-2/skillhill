generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  roleId        Int             @default(2)
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
  role          Roles           @relation(fields: [roleId], references: [id])
  courses       Course[]
  enrollments   Enrollment[]
  submissions   Submission[]

  @@index([roleId], map: "Users_roleId_fkey")
  @@map("Users")
}

model Roles {
  role_name String @unique
  id        Int    @id @default(autoincrement())
  users     User[]
}

model Course {
  id          Int              @id @default(autoincrement()) @map("course_id")
  name        String           @map("course_name")
  description String
  createdAt   DateTime         @default(now()) @map("created_at")
  categoryId  Int              @map("category_id")
  email       String
  isActive    Boolean          @default(false) @map("is_active")
  image       String?          @map("image")
  assignments Assignment[]
  materials   CourseMaterial[]
  modules     CourseModule[]
  category    Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [email], references: [email], onDelete: Cascade)
  enrollments Enrollment[]
  submissions Submission[]

  @@index([categoryId], map: "courses_category_id_fkey")
  @@index([email], map: "courses_email_fkey")
  @@map("courses")
}

model Category {
  id      Int      @id @default(autoincrement()) @map("category_id")
  name    String   @map("category_name")
  courses Course[]

  @@map("categories")
}

model CourseMaterial {
  id       Int           @id @default(autoincrement()) @map("material_id")
  courseId Int
  moduleId Int?
  course   Course        @relation(fields: [courseId], references: [id])
  module   CourseModule? @relation(fields: [moduleId], references: [id])
  files    File[]

  @@index([courseId], map: "course_materials_courseId_fkey")
  @@index([moduleId], map: "course_materials_moduleId_fkey")
  @@map("course_materials")
}

model File {
  id              Int              @id @default(autoincrement()) @map("file_id")
  name            String           @map("file_name")
  materialId      Int?             @map("coursematerialId")
  submissionId    String?
  assignmentId    String?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  assignment      Assignment?      @relation(fields: [assignmentId], references: [id])
  courseMaterial  CourseMaterial?  @relation(fields: [materialId], references: [id])
  submission      Submission?      @relation(fields: [submissionId], references: [id])
  moduleResources ModuleResource[]

  @@index([assignmentId], map: "files_assignmentId_fkey")
  @@index([materialId], map: "files_coursematerialId_fkey")
  @@index([submissionId], map: "files_submissionId_fkey")
  @@map("files")
}

model Enrollment {
  id         Int      @id @default(autoincrement()) @map("enrollment_id")
  email      String
  enrolledAt DateTime @default(now()) @map("enrolment_date")
  courseId   Int      @map("course_id")
  course     Course   @relation(fields: [courseId], references: [id])
  user       User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@index([courseId], map: "enrollment_course_id_fkey")
  @@index([email], map: "enrollment_email_fkey")
  @@map("enrollment")
}

model Assignment {
  id          String   @id @default(cuid()) @map("assignment_id")
  courseId    Int      @map("course_id")
  title       String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  files       File[]

  @@index([courseId], map: "assignments_course_id_fkey")
  @@map("assignments")
}

model Submission {
  id          String   @id @default(cuid()) @map("submission_id")
  courseId    Int      @map("course_id")
  userId      String   @map("user_id")
  submittedAt DateTime @default(now()) @map("submission_date")
  files       File[]
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "submissions_course_id_fkey")
  @@index([userId], map: "submissions_user_id_fkey")
  @@map("submissions")
}

model CourseModule {
  id          Int              @id @default(autoincrement()) @map("module_id")
  courseId    Int              @map("course_id")
  name        String           @map("module_name")
  description String
  materials   CourseMaterial[]
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  resources   ModuleResource[]

  @@index([courseId], map: "course_modules_course_id_fkey")
  @@map("course_modules")
}

model ModuleResource {
  id       Int          @id @default(autoincrement()) @map("resource_id")
  moduleId Int          @map("module_id")
  fileId   Int          @map("file_id")
  file     File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  module   CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([fileId], map: "module_resources_file_id_fkey")
  @@index([moduleId], map: "module_resources_module_id_fkey")
  @@map("module_resources")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("Authenticators")
}
